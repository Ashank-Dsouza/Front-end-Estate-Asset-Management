{"ast":null,"code":"var _jsxFileName = \"/Users/ashankdsouza/repos/Estate Asset Management/Front-end/src/pages/singUpPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from 'react';\nimport { Container, Box, Link, TextField, InputAdornment, FormControlLabel, Checkbox, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\nimport { green } from '@material-ui/core/colors';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyle = makeStyles(them => ({\n  Container: {\n    padding: `${them.spacing(4)}px 0px`,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    maxHeight: 600\n  },\n  InputFields: {\n    marginTop: them.spacing(8),\n    marginBottom: them.spacing(8),\n    width: \"100%\"\n  },\n  InputFieldsText: {\n    marginBottom: them.spacing(4),\n    maxWidth: 600,\n    display: 'block',\n    color: `${green[700]} !important`,\n    '&:hover': {\n      color: green[700]\n    },\n    '&:active': {\n      color: green[700],\n      borderColor: green[700]\n    }\n  },\n  CheckboxControler: {\n    color: green[700]\n  },\n  Button: {\n    display: 'block',\n    color: 'white',\n    backgroundColor: green[700],\n    '&:hover': {\n      backgroundColor: green[900]\n    }\n  }\n}));\nexport default function SingUp() {\n  _s();\n\n  const [password, setPasswordInput] = useState(''); // '' is the initial state value\n\n  const [username, setUserNameInput] = useState(''); // '' is the initial state value\n\n  const [email, setEmailInput] = useState(''); // '' is the initial state value\n\n  const classes = useStyle();\n\n  const preventDefault = event => {\n    event.preventDefault();\n  };\n\n  const submitOnClick = event => {\n    console.log(\"the submitOnClick\");\n    console.log(\"the value of password input is: \", password);\n    console.log(\"the value of email input is: \", email);\n    console.log(\"the value of username input is: \", username);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.Container,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          style: {\n            color: green[700]\n          },\n          children: \"Get started with a free account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Already have an account?\", \" \", /*#__PURE__*/_jsxDEV(Link, {\n            href: \"#\",\n            onClick: preventDefault,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.InputFields,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            value: username,\n            onInput: e => setUserNameInput(e.target.value),\n            label: \"UserName\",\n            variant: \"outlined\",\n            className: classes.InputFieldsText,\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsxDEV(AccountCircleIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 37\n              }, this)\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: email,\n            onInput: e => setEmailInput(e.target.value),\n            label: \"Email\",\n            variant: \"outlined\",\n            className: classes.InputFieldsText,\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsxDEV(AlternateEmailIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this)\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            value: password,\n            onInput: e => setPasswordInput(e.target.value),\n            label: \"Password\",\n            variant: \"outlined\",\n            type: \"password\",\n            className: classes.InputFieldsText,\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsxDEV(LockOpenIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 37\n              }, this)\n            },\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              color: green['A700'],\n              className: classes.CheckboxControler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 38\n            }, this),\n            label: \"I agree to the terms and conditions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => submitOnClick(),\n            variant: \"contained\",\n            className: classes.Button,\n            children: \"Get Started\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"\\xA9 2021 All Rights Reserved. CORK is a product of Designreset.\", /*#__PURE__*/_jsxDEV(Link, {\n            style: {\n              color: green[700]\n            },\n            children: \"Cookie Preferences, Privacy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), \", and\", /*#__PURE__*/_jsxDEV(Link, {\n            style: {\n              color: green[700]\n            },\n            children: \" Terms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(SingUp, \"nd+iZvxAhkJUb/D73Z6DrwUJkdY=\", false, function () {\n  return [useStyle];\n});\n\n_c = SingUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingUp\");","map":{"version":3,"sources":["/Users/ashankdsouza/repos/Estate Asset Management/Front-end/src/pages/singUpPage.js"],"names":["React","useState","Container","Box","Link","TextField","InputAdornment","FormControlLabel","Checkbox","Button","makeStyles","Typography","green","AccountCircleIcon","AlternateEmailIcon","LockOpenIcon","useStyle","them","padding","spacing","display","justifyContent","alignItems","height","maxHeight","InputFields","marginTop","marginBottom","width","InputFieldsText","maxWidth","color","borderColor","CheckboxControler","backgroundColor","SingUp","password","setPasswordInput","username","setUserNameInput","email","setEmailInput","classes","preventDefault","event","submitOnClick","console","log","e","target","value","startAdornment"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SACIC,SADJ,EAEIC,GAFJ,EAGIC,IAHJ,EAIIC,SAJJ,EAKIC,cALJ,EAMIC,gBANJ,EAOIC,QAPJ,EAQIC,MARJ,QASO,mBATP;AAUA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,MAAMC,QAAQ,GAAGN,UAAU,CAAEO,IAAD,KAAW;AACnCf,EAAAA,SAAS,EAAE;AACPgB,IAAAA,OAAO,EAAG,GAAED,IAAI,CAACE,OAAL,CAAa,CAAb,CAAgB,QADrB;AAEPC,IAAAA,OAAO,EAAE,MAFF;AAGPC,IAAAA,cAAc,EAAE,QAHT;AAIPC,IAAAA,UAAU,EAAE,QAJL;AAKPC,IAAAA,MAAM,EAAE,OALD;AAMPC,IAAAA,SAAS,EAAE;AANJ,GADwB;AASnCC,EAAAA,WAAW,EAAE;AACTC,IAAAA,SAAS,EAAET,IAAI,CAACE,OAAL,CAAa,CAAb,CADF;AAETQ,IAAAA,YAAY,EAAEV,IAAI,CAACE,OAAL,CAAa,CAAb,CAFL;AAGTS,IAAAA,KAAK,EAAE;AAHE,GATsB;AAcnCC,EAAAA,eAAe,EAAE;AACbF,IAAAA,YAAY,EAAEV,IAAI,CAACE,OAAL,CAAa,CAAb,CADD;AAEbW,IAAAA,QAAQ,EAAE,GAFG;AAGbV,IAAAA,OAAO,EAAE,OAHI;AAIbW,IAAAA,KAAK,EAAG,GAAEnB,KAAK,CAAC,GAAD,CAAM,aAJR;AAKb,eAAW;AACPmB,MAAAA,KAAK,EAAEnB,KAAK,CAAC,GAAD;AADL,KALE;AAQb,gBAAY;AACRmB,MAAAA,KAAK,EAAEnB,KAAK,CAAC,GAAD,CADJ;AAERoB,MAAAA,WAAW,EAAEpB,KAAK,CAAC,GAAD;AAFV;AARC,GAdkB;AA2BnCqB,EAAAA,iBAAiB,EAAE;AACfF,IAAAA,KAAK,EAAEnB,KAAK,CAAC,GAAD;AADG,GA3BgB;AA8BnCH,EAAAA,MAAM,EAAE;AACJW,IAAAA,OAAO,EAAE,OADL;AAEJW,IAAAA,KAAK,EAAE,OAFH;AAGJG,IAAAA,eAAe,EAAEtB,KAAK,CAAC,GAAD,CAHlB;AAIJ,eAAW;AACPsB,MAAAA,eAAe,EAAEtB,KAAK,CAAC,GAAD;AADf;AAJP;AA9B2B,CAAX,CAAD,CAA3B;AAwCA,eAAe,SAASuB,MAAT,GAAkB;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,gBAAX,IAA+BpC,QAAQ,CAAC,EAAD,CAA7C,CAD6B,CACsB;;AACnD,QAAM,CAACqC,QAAD,EAAWC,gBAAX,IAA+BtC,QAAQ,CAAC,EAAD,CAA7C,CAF6B,CAEsB;;AACnD,QAAM,CAACuC,KAAD,EAAQC,aAAR,IAAyBxC,QAAQ,CAAC,EAAD,CAAvC,CAH6B,CAGgB;;AAG7C,QAAMyC,OAAO,GAAG1B,QAAQ,EAAxB;;AAEA,QAAM2B,cAAc,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACD,cAAN;AACH,GAFD;;AAIA,QAAME,aAAa,GAAID,KAAD,IAAW;AAC7BE,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDX,QAAhD;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CP,KAA7C;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDT,QAAhD;AACH,GALD;;AAOA,sBACI;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEI,OAAO,CAACxC,SAAxB;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,IAApB;AAAA,gCACI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAyB,UAAA,KAAK,EAAE;AAAE6B,YAAAA,KAAK,EAAEnB,KAAK,CAAC,GAAD;AAAd,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,UAAD;AAAA,iDAC6B,GAD7B,eAEI,QAAC,IAAD;AAAM,YAAA,IAAI,EAAC,GAAX;AAAe,YAAA,OAAO,EAAE+B,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAQI,QAAC,GAAD;AAAK,UAAA,SAAS,EAAED,OAAO,CAACjB,WAAxB;AAAA,kCACI,QAAC,SAAD;AACA,YAAA,KAAK,EAAEa,QADP;AAEA,YAAA,OAAO,EAAEU,CAAC,IAAIT,gBAAgB,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAF9B;AAGI,YAAA,KAAK,EAAC,UAHV;AAII,YAAA,OAAO,EAAC,UAJZ;AAKI,YAAA,SAAS,EAAER,OAAO,CAACb,eALvB;AAMI,YAAA,UAAU,EAAE;AACRsB,cAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,gBAAA,QAAQ,EAAC,OAAzB;AAAA,uCACI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFI,aANhB;AAaI,YAAA,SAAS,EAAE;AAbf;AAAA;AAAA;AAAA;AAAA,kBADJ,eAgBI,QAAC,SAAD;AACI,YAAA,KAAK,EAAEX,KADX;AAEI,YAAA,OAAO,EAAEQ,CAAC,IAAIP,aAAa,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAF/B;AAGI,YAAA,KAAK,EAAC,OAHV;AAII,YAAA,OAAO,EAAC,UAJZ;AAKI,YAAA,SAAS,EAAER,OAAO,CAACb,eALvB;AAMI,YAAA,UAAU,EAAE;AACRsB,cAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,gBAAA,QAAQ,EAAC,OAAzB;AAAA,uCACI,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFI,aANhB;AAaI,YAAA,SAAS,EAAE;AAbf;AAAA;AAAA;AAAA;AAAA,kBAhBJ,eA+BI,QAAC,SAAD;AACI,YAAA,KAAK,EAAEf,QADX;AAEI,YAAA,OAAO,EAAEY,CAAC,IAAIX,gBAAgB,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAFlC;AAGI,YAAA,KAAK,EAAC,UAHV;AAII,YAAA,OAAO,EAAC,UAJZ;AAKI,YAAA,IAAI,EAAC,UALT;AAMI,YAAA,SAAS,EAAER,OAAO,CAACb,eANvB;AAOI,YAAA,UAAU,EAAE;AACRsB,cAAAA,cAAc,eACV,QAAC,cAAD;AAAgB,gBAAA,QAAQ,EAAC,OAAzB;AAAA,uCACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFI,aAPhB;AAcI,YAAA,SAAS,EAAE;AAdf;AAAA;AAAA;AAAA;AAAA,kBA/BJ,eA+CI,QAAC,gBAAD;AACI,YAAA,OAAO,eAAE,QAAC,QAAD;AAAU,cAAA,KAAK,EAAEvC,KAAK,CAAC,MAAD,CAAtB;AAAgC,cAAA,SAAS,EAAE8B,OAAO,CAACT;AAAnD;AAAA;AAAA;AAAA;AAAA,oBADb;AAEI,YAAA,KAAK,EAAC;AAFV;AAAA;AAAA;AAAA;AAAA,kBA/CJ,eAmDI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAMY,aAAa,EAApC;AAAwC,YAAA,OAAO,EAAC,WAAhD;AAA4D,YAAA,SAAS,EAAEH,OAAO,CAACjC,MAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnDJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eA6DI,QAAC,UAAD;AAAA,sGAEI,QAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEsB,cAAAA,KAAK,EAAEnB,KAAK,CAAC,GAAD;AAAd,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,wBAGI,QAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEmB,cAAAA,KAAK,EAAEnB,KAAK,CAAC,GAAD;AAAd,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAyEH;;GA5FuBuB,M;UAMJnB,Q;;;KANImB,M","sourcesContent":["import React from \"react\";\r\nimport { useState } from 'react';\r\nimport {\r\n    Container,\r\n    Box,\r\n    Link,\r\n    TextField,\r\n    InputAdornment,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { green } from '@material-ui/core/colors';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\n\r\nconst useStyle = makeStyles((them) => ({\r\n    Container: {\r\n        padding: `${them.spacing(4)}px 0px`,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100vh',\r\n        maxHeight: 600\r\n    },\r\n    InputFields: {\r\n        marginTop: them.spacing(8),\r\n        marginBottom: them.spacing(8),\r\n        width: \"100%\",\r\n    },\r\n    InputFieldsText: {\r\n        marginBottom: them.spacing(4),\r\n        maxWidth: 600,\r\n        display: 'block',\r\n        color: `${green[700]} !important`,\r\n        '&:hover': {\r\n            color: green[700],\r\n        },\r\n        '&:active': {\r\n            color: green[700],\r\n            borderColor: green[700],\r\n        }\r\n    },\r\n    CheckboxControler: {\r\n        color: green[700],\r\n    },\r\n    Button: {\r\n        display: 'block',\r\n        color: 'white',\r\n        backgroundColor: green[700],\r\n        '&:hover': {\r\n            backgroundColor: green[900],\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function SingUp() {\r\n    const [password, setPasswordInput] = useState(''); // '' is the initial state value\r\n    const [username, setUserNameInput] = useState(''); // '' is the initial state value\r\n    const [email, setEmailInput] = useState(''); // '' is the initial state value\r\n\r\n\r\n    const classes = useStyle();\r\n\r\n    const preventDefault = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const submitOnClick = (event) => {\r\n        console.log(\"the submitOnClick\");\r\n        console.log(\"the value of password input is: \", password);\r\n        console.log(\"the value of email input is: \", email);\r\n        console.log(\"the value of username input is: \", username);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box className={classes.Container}>\r\n                <Container maxWidth=\"md\">\r\n                    <Typography variant=\"h4\" style={{ color: green[700] }}>Get started with a free account</Typography>\r\n                    <Typography>\r\n                        Already have an account?{\" \"}\r\n                        <Link href=\"#\" onClick={preventDefault}>\r\n                            Login\r\n                        </Link>\r\n                    </Typography>\r\n                    <Box className={classes.InputFields}>\r\n                        <TextField\r\n                        value={username}\r\n                        onInput={e => setUserNameInput(e.target.value)}\r\n                            label=\"UserName\"\r\n                            variant=\"outlined\"\r\n                            className={classes.InputFieldsText}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AccountCircleIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            fullWidth={true}\r\n                        />\r\n                        <TextField\r\n                            value={email}\r\n                            onInput={e => setEmailInput(e.target.value)}\r\n                            label=\"Email\"\r\n                            variant=\"outlined\"\r\n                            className={classes.InputFieldsText}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <AlternateEmailIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            fullWidth={true}\r\n                        />\r\n                        <TextField\r\n                            value={password}\r\n                            onInput={e => setPasswordInput(e.target.value)}\r\n                            label=\"Password\"\r\n                            variant=\"outlined\"\r\n                            type='password'\r\n                            className={classes.InputFieldsText}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <LockOpenIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            fullWidth={true}\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox color={green['A700']} className={classes.CheckboxControler} />}\r\n                            label=\"I agree to the terms and conditions\"\r\n                        />\r\n                        <Button onClick={() => submitOnClick()} variant='contained' className={classes.Button}>Get Started</Button>\r\n                    </Box>\r\n                    <Typography>\r\n                        © 2021 All Rights Reserved. CORK is a product of Designreset.\r\n                        <Link style={{ color: green[700] }}>Cookie Preferences, Privacy</Link>, and\r\n                        <Link style={{ color: green[700] }}> Terms</Link>.\r\n                    </Typography>\r\n                </Container>\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}